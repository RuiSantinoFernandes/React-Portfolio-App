{"ast":null,"code":"// src/parser.ts\nimport { marked } from \"marked\";\n\n// src/styles.ts\nvar emptyStyle = {};\nvar baseHeaderStyles = {\n  fontWeight: \"500\",\n  paddingTop: 20\n};\nvar h1 = {\n  ...baseHeaderStyles,\n  fontSize: \"2.5rem\"\n};\nvar h2 = {\n  ...baseHeaderStyles,\n  fontSize: \"2rem\"\n};\nvar h3 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.75rem\"\n};\nvar h4 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.5rem\"\n};\nvar h5 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.25rem\"\n};\nvar h6 = {\n  ...baseHeaderStyles,\n  fontSize: \"1rem\"\n};\nvar bold = {\n  fontWeight: \"bold\"\n};\nvar italic = {\n  fontStyle: \"italic\"\n};\nvar blockQuote = {\n  background: \"#f9f9f9\",\n  borderLeft: \"10px solid #ccc\",\n  margin: \"1.5em 10px\",\n  padding: \"1em 10px\"\n};\nvar codeInline = {\n  color: \"#212529\",\n  fontSize: \"87.5%\",\n  display: \"inline\",\n  background: \" #f8f8f8\",\n  fontFamily: `SFMono-Regular,Menlo,Monaco,Consolas,monospace`\n};\nvar codeBlock = {\n  ...codeInline,\n  paddingTop: 10,\n  paddingRight: 10,\n  paddingLeft: 10,\n  paddingBottom: 1,\n  marginBottom: 20,\n  background: \" #f8f8f8\"\n};\nvar link = {\n  color: \"#007bff\",\n  textDecoration: \"underline\",\n  backgroundColor: \"transparent\"\n};\nvar styles = {\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  blockQuote,\n  bold,\n  italic,\n  link,\n  codeBlock: {\n    ...codeBlock,\n    wordWrap: \"break-word\"\n  },\n  codeInline: {\n    ...codeInline,\n    wordWrap: \"break-word\"\n  },\n  p: emptyStyle,\n  li: emptyStyle,\n  ul: emptyStyle,\n  ol: emptyStyle,\n  image: emptyStyle,\n  br: emptyStyle,\n  hr: emptyStyle,\n  table: emptyStyle,\n  thead: emptyStyle,\n  tbody: emptyStyle,\n  th: emptyStyle,\n  td: emptyStyle,\n  tr: emptyStyle,\n  strikethrough: emptyStyle\n};\n\n// src/utils.ts\nfunction escapeQuotes(value) {\n  if (value.includes('\"')) {\n    return value.replace(/\"/g, \"&#x27;\");\n  }\n  return value;\n}\nfunction camelToKebabCase(str) {\n  return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction parseCssInJsToInlineCss(cssProperties) {\n  if (!cssProperties) return \"\";\n  const numericalCssProperties = [\"width\", \"height\", \"margin\", \"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\", \"padding\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\", \"borderWidth\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"outlineWidth\", \"top\", \"right\", \"bottom\", \"left\", \"fontSize\", \"lineHeight\", \"letterSpacing\", \"wordSpacing\", \"maxWidth\", \"minWidth\", \"maxHeight\", \"minHeight\", \"borderRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"textIndent\", \"gridColumnGap\", \"gridRowGap\", \"gridGap\", \"translateX\", \"translateY\"];\n  return Object.entries(cssProperties).map(_ref => {\n    let [property, value] = _ref;\n    if (typeof value === \"number\" && numericalCssProperties.includes(property)) {\n      return `${camelToKebabCase(property)}:${value}px`;\n    } else {\n      const escapedValue = escapeQuotes(value);\n      return `${camelToKebabCase(property)}:${escapedValue}`;\n    }\n  }).join(\";\");\n}\nvar initRenderer = _ref2 => {\n  let {\n    customStyles\n  } = _ref2;\n  const finalStyles = {\n    ...styles,\n    ...customStyles\n  };\n  const customRenderer = {\n    blockquote(quote) {\n      return `<blockquote${parseCssInJsToInlineCss(finalStyles.blockQuote) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.blockQuote)}\"` : \"\"}>\n${quote}</blockquote>\n`;\n    },\n    br() {\n      return `<br${parseCssInJsToInlineCss(finalStyles.br) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.br)}\"` : \"\"} />`;\n    },\n    code(code) {\n      code = code.replace(/\\n$/, \"\") + \"\\n\";\n      return `<pre${parseCssInJsToInlineCss(finalStyles.codeBlock) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeBlock)}\"` : \"\"}><code>${code}</code></pre>\n`;\n    },\n    codespan(text) {\n      return `<code${parseCssInJsToInlineCss(finalStyles.codeInline) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeInline)}\"` : \"\"}>${text}</code>`;\n    },\n    del(text) {\n      return `<del${parseCssInJsToInlineCss(finalStyles.strikethrough) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.strikethrough)}\"` : \"\"}>${text}</del>`;\n    },\n    em(text) {\n      return `<em${parseCssInJsToInlineCss(finalStyles.italic) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.italic)}\"` : \"\"}>${text}</em>`;\n    },\n    heading(text, level) {\n      return `<h${level}${parseCssInJsToInlineCss(finalStyles[`h${level}`]) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles[`h${level}`])}\"` : \"\"}>${text}</h${level}>`;\n    },\n    hr() {\n      return `<hr${parseCssInJsToInlineCss(finalStyles.hr) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.hr)}\"` : \"\"} />\n`;\n    },\n    image(href, _, text) {\n      let out = `<img src=\"${href}\" alt=\"${text}\"${parseCssInJsToInlineCss(finalStyles.image) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.image)}\"` : \"\"}>`;\n      return out;\n    },\n    link(href, _, text) {\n      let out = `<a href=\"${href}\" target=\"_blank\"${parseCssInJsToInlineCss(finalStyles.link) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.link)}\"` : \"\"}>${text}</a>`;\n      return out;\n    },\n    list(body, ordered, start) {\n      const type = ordered ? \"ol\" : \"ul\";\n      const startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n      const styles2 = parseCssInJsToInlineCss(finalStyles[ordered ? \"ol\" : \"ul\"]);\n      return \"<\" + type + startatt + `${styles2 !== \"\" ? ` style=\"${styles2}\"` : \"\"}>\n` + body + \"</\" + type + \">\\n\";\n    },\n    listitem(text) {\n      return `<li${parseCssInJsToInlineCss(finalStyles.li) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.li)}\"` : \"\"}>${text}</li>\n`;\n    },\n    paragraph(text) {\n      return `<p${parseCssInJsToInlineCss(finalStyles.p) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.p)}\"` : \"\"}>${text}</p>\n`;\n    },\n    strong(text) {\n      return `<strong${parseCssInJsToInlineCss(finalStyles.bold) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.bold)}\"` : \"\"}>${text}</strong>`;\n    },\n    table(header, body) {\n      if (body) body = `<tbody>${body}</tbody>`;\n      return `<table${parseCssInJsToInlineCss(finalStyles.table) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.table)}\"` : \"\"}>\n<thead${parseCssInJsToInlineCss(finalStyles.thead) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.thead)}\"` : \"\"}>\n${header}</thead>\n${body}</table>\n`;\n    },\n    tablecell(content, flags) {\n      const type = flags.header ? \"th\" : \"td\";\n      const tag = flags.align ? `<${type} align=\"${flags.align}\"${parseCssInJsToInlineCss(finalStyles.td) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"` : \"\"}>` : `<${type}${parseCssInJsToInlineCss(finalStyles.td) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"` : \"\"}>`;\n      return tag + content + `</${type}>\n`;\n    },\n    tablerow(content) {\n      return `<tr${parseCssInJsToInlineCss(finalStyles.tr) !== \"\" ? ` style=\"${parseCssInJsToInlineCss(finalStyles.tr)}\"` : \"\"}>\n${content}</tr>\n`;\n    }\n  };\n  return customRenderer;\n};\n\n// src/parser.ts\nvar MarkdownParser = class {\n  renderer;\n  constructor(_ref3) {\n    let {\n      customStyles\n    } = _ref3;\n    this.renderer = initRenderer({\n      customStyles\n    });\n  }\n  parse(markdown) {\n    marked.use({\n      renderer: this.renderer\n    });\n    return marked.parse(markdown);\n  }\n};\n\n// src/parseMarkdownToJSX.ts\nvar parseMarkdownToJSX = _ref4 => {\n  let {\n    markdown,\n    customStyles\n  } = _ref4;\n  const parser = new MarkdownParser({\n    customStyles\n  });\n  return parser.parse(markdown);\n};\n\n// src/components/emailMarkdown.tsx\nimport * as React from \"react\";\nvar EmailMarkdown = _ref5 => {\n  let {\n    markdown,\n    markdownCustomStyles,\n    markdownContainerStyles\n  } = _ref5;\n  const parsedMarkdown = parseMarkdownToJSX({\n    markdown,\n    customStyles: markdownCustomStyles\n  });\n  return /* @__PURE__ */React.createElement(\"div\", {\n    style: markdownContainerStyles,\n    dangerouslySetInnerHTML: {\n      __html: parsedMarkdown\n    }\n  });\n};\nexport { EmailMarkdown, camelToKebabCase, parseCssInJsToInlineCss, parseMarkdownToJSX };","map":{"version":3,"names":["marked","emptyStyle","baseHeaderStyles","fontWeight","paddingTop","h1","fontSize","h2","h3","h4","h5","h6","bold","italic","fontStyle","blockQuote","background","borderLeft","margin","padding","codeInline","color","display","fontFamily","codeBlock","paddingRight","paddingLeft","paddingBottom","marginBottom","link","textDecoration","backgroundColor","styles","wordWrap","p","li","ul","ol","image","br","hr","table","thead","tbody","th","td","tr","strikethrough","escapeQuotes","value","includes","replace","camelToKebabCase","str","toLowerCase","parseCssInJsToInlineCss","cssProperties","numericalCssProperties","Object","entries","map","_ref","property","escapedValue","join","initRenderer","_ref2","customStyles","finalStyles","customRenderer","blockquote","quote","code","codespan","text","del","em","heading","level","href","_","out","list","body","ordered","start","type","startatt","styles2","listitem","paragraph","strong","header","tablecell","content","flags","tag","align","tablerow","MarkdownParser","renderer","constructor","_ref3","parse","markdown","use","parseMarkdownToJSX","_ref4","parser","React","EmailMarkdown","_ref5","markdownCustomStyles","markdownContainerStyles","parsedMarkdown","createElement","style","dangerouslySetInnerHTML","__html"],"sources":["C:\\Users\\17324\\PortfolioApp\\node_modules\\md-to-react-email\\src\\parser.ts","C:\\Users\\17324\\PortfolioApp\\node_modules\\md-to-react-email\\src\\styles.ts","C:\\Users\\17324\\PortfolioApp\\node_modules\\md-to-react-email\\src\\utils.ts","C:\\Users\\17324\\PortfolioApp\\node_modules\\md-to-react-email\\src\\parseMarkdownToJSX.ts","C:\\Users\\17324\\PortfolioApp\\node_modules\\md-to-react-email\\src\\components\\emailMarkdown.tsx"],"sourcesContent":["import { marked, RendererObject } from \"marked\";\nimport { StylesType } from \"./types\";\nimport { initRenderer } from \"./utils\";\n\nexport class MarkdownParser {\n  private readonly renderer: RendererObject;\n\n  constructor({ customStyles }: { customStyles?: StylesType }) {\n    this.renderer = initRenderer({ customStyles });\n  }\n\n  parse(markdown: string) {\n    marked.use({\n      renderer: this.renderer,\n    });\n\n    return marked.parse(markdown);\n  }\n}\n","import { StylesType } from \"./types\";\n\nconst emptyStyle = {};\n\nconst baseHeaderStyles = {\n  fontWeight: \"500\",\n  paddingTop: 20,\n};\n\nconst h1 = {\n  ...baseHeaderStyles,\n  fontSize: \"2.5rem\",\n};\n\nconst h2 = {\n  ...baseHeaderStyles,\n  fontSize: \"2rem\",\n};\nconst h3 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.75rem\",\n};\nconst h4 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.5rem\",\n};\nconst h5 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.25rem\",\n};\nconst h6 = {\n  ...baseHeaderStyles,\n  fontSize: \"1rem\",\n};\n\nconst bold = {\n  fontWeight: \"bold\",\n};\n\nconst italic = {\n  fontStyle: \"italic\",\n};\n\nconst blockQuote = {\n  background: \"#f9f9f9\",\n  borderLeft: \"10px solid #ccc\",\n  margin: \"1.5em 10px\",\n  padding: \"1em 10px\",\n};\n\nconst codeInline = {\n  color: \"#212529\",\n  fontSize: \"87.5%\",\n  display: \"inline\",\n  background: \" #f8f8f8\",\n  fontFamily: `SFMono-Regular,Menlo,Monaco,Consolas,monospace`,\n};\n\nconst codeBlock = {\n  ...codeInline,\n  paddingTop: 10,\n  paddingRight: 10,\n  paddingLeft: 10,\n  paddingBottom: 1,\n  marginBottom: 20,\n  background: \" #f8f8f8\",\n};\n\nconst link = {\n  color: \"#007bff\",\n  textDecoration: \"underline\",\n  backgroundColor: \"transparent\",\n};\n\nexport const styles: StylesType = {\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  blockQuote,\n  bold,\n  italic,\n  link,\n  codeBlock: { ...codeBlock, wordWrap: \"break-word\" },\n  codeInline: { ...codeInline, wordWrap: \"break-word\" },\n  p: emptyStyle,\n  li: emptyStyle,\n  ul: emptyStyle,\n  ol: emptyStyle,\n  image: emptyStyle,\n  br: emptyStyle,\n  hr: emptyStyle,\n  table: emptyStyle,\n  thead: emptyStyle,\n  tbody: emptyStyle,\n  th: emptyStyle,\n  td: emptyStyle,\n  tr: emptyStyle,\n  strikethrough: emptyStyle,\n};\n","import { CSSProperties } from \"react\";\nimport { StylesType, initRendererProps } from \"./types\";\nimport { RendererObject } from \"marked\";\nimport { styles } from \"./styles\";\n\nfunction escapeQuotes(value: string) {\n  if (value.includes('\"')) {\n    return value.replace(/\"/g, \"&#x27;\");\n  }\n  return value;\n}\n\nexport function camelToKebabCase(str: string): string {\n  return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nexport function parseCssInJsToInlineCss(\n  cssProperties: CSSProperties | undefined\n): string {\n  if (!cssProperties) return \"\";\n\n  const numericalCssProperties = [\n    \"width\",\n    \"height\",\n    \"margin\",\n    \"marginTop\",\n    \"marginRight\",\n    \"marginBottom\",\n    \"marginLeft\",\n    \"padding\",\n    \"paddingTop\",\n    \"paddingRight\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    \"borderWidth\",\n    \"borderTopWidth\",\n    \"borderRightWidth\",\n    \"borderBottomWidth\",\n    \"borderLeftWidth\",\n    \"outlineWidth\",\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\",\n    \"fontSize\",\n    \"lineHeight\",\n    \"letterSpacing\",\n    \"wordSpacing\",\n    \"maxWidth\",\n    \"minWidth\",\n    \"maxHeight\",\n    \"minHeight\",\n    \"borderRadius\",\n    \"borderTopLeftRadius\",\n    \"borderTopRightRadius\",\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n    \"textIndent\",\n    \"gridColumnGap\",\n    \"gridRowGap\",\n    \"gridGap\",\n    \"translateX\",\n    \"translateY\",\n  ];\n\n  return Object.entries(cssProperties)\n    .map(([property, value]) => {\n      if (\n        typeof value === \"number\" &&\n        numericalCssProperties.includes(property)\n      ) {\n        return `${camelToKebabCase(property)}:${value}px`;\n      } else {\n        const escapedValue = escapeQuotes(value);\n        return `${camelToKebabCase(property)}:${escapedValue}`;\n      }\n    })\n    .join(\";\");\n}\n\nexport const initRenderer = ({\n  customStyles,\n}: initRendererProps): RendererObject => {\n  const finalStyles = { ...styles, ...customStyles };\n\n  const customRenderer: RendererObject = {\n    blockquote(quote) {\n      return `<blockquote${\n        parseCssInJsToInlineCss(finalStyles.blockQuote) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.blockQuote)}\"`\n          : \"\"\n      }>\\n${quote}</blockquote>\\n`;\n    },\n\n    br() {\n      return `<br${\n        parseCssInJsToInlineCss(finalStyles.br) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.br)}\"`\n          : \"\"\n      } />`;\n    },\n\n    code(code) {\n      code = code.replace(/\\n$/, \"\") + \"\\n\";\n\n      return `<pre${\n        parseCssInJsToInlineCss(finalStyles.codeBlock) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeBlock)}\"`\n          : \"\"\n      }><code>${code}</code></pre>\\n`;\n    },\n\n    codespan(text) {\n      return `<code${\n        parseCssInJsToInlineCss(finalStyles.codeInline) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.codeInline)}\"`\n          : \"\"\n      }>${text}</code>`;\n    },\n\n    del(text) {\n      return `<del${\n        parseCssInJsToInlineCss(finalStyles.strikethrough) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.strikethrough)}\"`\n          : \"\"\n      }>${text}</del>`;\n    },\n\n    em(text) {\n      return `<em${\n        parseCssInJsToInlineCss(finalStyles.italic) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.italic)}\"`\n          : \"\"\n      }>${text}</em>`;\n    },\n\n    heading(text, level) {\n      return `<h${level}${\n        parseCssInJsToInlineCss(\n          finalStyles[`h${level}` as keyof StylesType]\n        ) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(\n              finalStyles[`h${level}` as keyof StylesType]\n            )}\"`\n          : \"\"\n      }>${text}</h${level}>`;\n    },\n\n    hr() {\n      return `<hr${\n        parseCssInJsToInlineCss(finalStyles.hr) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.hr)}\"`\n          : \"\"\n      } />\\n`;\n    },\n\n    image(href, _, text) {\n      let out = `<img src=\"${href}\" alt=\"${text}\"${\n        parseCssInJsToInlineCss(finalStyles.image) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.image)}\"`\n          : \"\"\n      }>`;\n      return out;\n    },\n\n    link(href, _, text) {\n      let out = `<a href=\"${href}\" target=\"_blank\"${\n        parseCssInJsToInlineCss(finalStyles.link) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.link)}\"`\n          : \"\"\n      }>${text}</a>`;\n      return out;\n    },\n\n    list(body, ordered, start) {\n      const type = ordered ? \"ol\" : \"ul\";\n      const startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n      const styles = parseCssInJsToInlineCss(\n        finalStyles[ordered ? \"ol\" : \"ul\"]\n      );\n      return (\n        \"<\" +\n        type +\n        startatt +\n        `${styles !== \"\" ? ` style=\"${styles}\"` : \"\"}>\\n` +\n        body +\n        \"</\" +\n        type +\n        \">\\n\"\n      );\n    },\n\n    listitem(text) {\n      return `<li${\n        parseCssInJsToInlineCss(finalStyles.li) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.li)}\"`\n          : \"\"\n      }>${text}</li>\\n`;\n    },\n\n    paragraph(text) {\n      return `<p${\n        parseCssInJsToInlineCss(finalStyles.p) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.p)}\"`\n          : \"\"\n      }>${text}</p>\\n`;\n    },\n\n    strong(text) {\n      return `<strong${\n        parseCssInJsToInlineCss(finalStyles.bold) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.bold)}\"`\n          : \"\"\n      }>${text}</strong>`;\n    },\n\n    table(header, body) {\n      if (body) body = `<tbody>${body}</tbody>`;\n\n      return `<table${\n        parseCssInJsToInlineCss(finalStyles.table) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.table)}\"`\n          : \"\"\n      }>\\n<thead${\n        parseCssInJsToInlineCss(finalStyles.thead) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.thead)}\"`\n          : \"\"\n      }>\\n${header}</thead>\\n${body}</table>\\n`;\n    },\n\n    tablecell(content, flags) {\n      const type = flags.header ? \"th\" : \"td\";\n      const tag = flags.align\n        ? `<${type} align=\"${flags.align}\"${\n            parseCssInJsToInlineCss(finalStyles.td) !== \"\"\n              ? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"`\n              : \"\"\n          }>`\n        : `<${type}${\n            parseCssInJsToInlineCss(finalStyles.td) !== \"\"\n              ? ` style=\"${parseCssInJsToInlineCss(finalStyles.td)}\"`\n              : \"\"\n          }>`;\n      return tag + content + `</${type}>\\n`;\n    },\n\n    tablerow(content) {\n      return `<tr${\n        parseCssInJsToInlineCss(finalStyles.tr) !== \"\"\n          ? ` style=\"${parseCssInJsToInlineCss(finalStyles.tr)}\"`\n          : \"\"\n      }>\\n${content}</tr>\\n`;\n    },\n  };\n\n  return customRenderer;\n};\n","import { MarkdownParser } from \"./parser\";\nimport { parseMarkdownToJSXProps } from \"./types\";\n\nexport const parseMarkdownToJSX = ({\n  markdown,\n  customStyles,\n}: parseMarkdownToJSXProps) => {\n  const parser = new MarkdownParser({ customStyles });\n  return parser.parse(markdown);\n};\n","import * as React from \"react\";\nimport { StylesType } from \"../types\";\nimport { parseMarkdownToJSX } from \"../parseMarkdownToJSX\";\n\ninterface EmailMarkdownProps {\n  markdown: string;\n  markdownCustomStyles?: StylesType;\n  markdownContainerStyles?: React.CSSProperties;\n}\n\nexport const EmailMarkdown: React.FC<EmailMarkdownProps> = ({\n  markdown,\n  markdownCustomStyles,\n  markdownContainerStyles,\n}) => {\n  const parsedMarkdown = parseMarkdownToJSX({\n    markdown,\n    customStyles: markdownCustomStyles,\n  });\n\n  return (\n    <div\n      style={markdownContainerStyles}\n      dangerouslySetInnerHTML={{ __html: parsedMarkdown }}\n    />\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}